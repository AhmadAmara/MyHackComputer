// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

	field int curMaxLen;
	field int curLength;
	field Array curStrArr;
	
	
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
	let curMaxLen = maxLength;
	let curLength = 0;
	if(maxLength > 0)
	{
		let curStrArr = Array.new(curMaxLen);
    }
	return this;
    }
    /** Disposes this string. */
    method void dispose() {
		if(curMaxLen > 0)
		{
		do curStrArr.dispose();
		}
		do Memory.deAlloc(this);
		return;
    }

    /** Returns the current length of this string. */
    method int length() {
	return curLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
		return curStrArr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
		let curStrArr[j] = c;
		return;
		}

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
		let curStrArr[curLength] = c;
		let curLength = curLength + 1;
		return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
		let curLength = curLength - 1;
		return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int j, sign,d, val;
        let j = 0;
        let sign = 1;
        let val = 0;
        if(curLength = 0)
        {
            return 0;
        }
        if(curStrArr[0] = 45)
        {

        let sign  = -1;
        let j= 1;
        }

       while(j < curLength)
       {
        let d = curStrArr[j] - 48;
        let val = val*10 + d;
        let j = j + 1;
       }
       return sign * val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
    var int curVal;
    let curVal = val;
    let curLength = 0;
    if(val < 0)
    {
        do appendChar(45);
        let curVal = -curVal;
    }
    do setIntHelper(curVal);
    return;
    }

    method void setIntHelper(int val)
    {
    var int mod ,curChar;
    let curChar = val - ((val/10) * 10);

    if(val < 10 )
    {
        do appendChar(48 + curChar);
        return;
    }
    else
    {
        do setIntHelper(val/10);
        do appendChar(48 + curChar);
    }
    return;

    }



    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {

    return  34;
    }
}
