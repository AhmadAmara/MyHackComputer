// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

	static Array twoToThe;
	
	
    /** Initializes the library. */
    function void init() {
    var int i, val;
    let twoToThe = Array.new(16);
    let i = 0;
    let val = 1;
    while(i < 16)
    {
		let twoToThe[i] = val;
		let i = i+1;
		let val = val + val;
    }
    return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
		if(x > 0){
		return x;
		}else{
		return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
		var int sum, shiftedX, j;
		let sum = 0;
		let shiftedX = x;
		let j = 0;
		while(j < 16)
		{
			if(Math.bit(y, j)){
				let sum = sum + shiftedX;
			}
			let j = j + 1;
			let shiftedX = shiftedX + shiftedX;
		}
		return sum;
    }


    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
		var int a, b, q, res;
		var boolean sign;
		let sign = ((x < 0) = (y < 0));
		let a = Math.abs(x);
		let b = Math.abs(y);

		if((b > a) | (b < 0))
		{
			return 0;
		}

		if(b + b < 0)
		{
			return 1;
		}

		let q = Math.divide(a, b + b);
		
		if((a - (2 * q * b)) < b)
		{
			let res = q + q;
		}
		else
		{
		    let res = q + q + 1;
		}
		if(sign)
		{
		    return res;
		}
		else
		{
		    return -res;
		}

    }
    

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, cur, cur2;
        let y = 0;
        let j = 7;
        while(j > -1)
        {
            let cur = y + twoToThe[j];
            let cur2 = cur * cur;
            if(~(cur2 > x) & (cur2 > 0))
            {
                let y = cur;
            }
            let j = j - 1;

        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {

        if( a < b )
        {
            return b;
        }
        else
        {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if( a < b )
        {
            return a;
        }
        else
        {
            return b;
        }
    }
    
    /**Returns true if the j-th bit of the integer x is 1 and false otherwise.*/
    function int bit(int x, int j) {
		return ~((x & twoToThe[j]) = 0) ;
    }
    
    
}
